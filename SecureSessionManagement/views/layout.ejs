<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'Secure Session Management' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/themes/color.css">
    <link rel="stylesheet" href="/styles/themes/default/easyui.css">
    <link rel="stylesheet" href="/styles/themes/demo.css">
    <link rel="stylesheet" href="/styles/themes/icon.css">
    <!--STYLES END-->


  </head>

  <body>
  <div style="margin:20px 0;"></div>
  <div class="easyui-layout" style="width:800px;height:550px;">
    <div data-options="region:'north'" style="height:75px">
      <div style="padding:5px 0; text-align: center;">
        <a href="/book" class="easyui-linkbutton" data-options="iconCls:'icon-large-book',size:'large',iconAlign:'top'">Books</a>
        <a href="/user" class="easyui-linkbutton" data-options="iconCls:'icon-large-users',size:'large',iconAlign:'top'">Users</a>
      </div>
    </div>

    <div data-options="region:'south'" style="height:75px">
      <div style="padding:5px 0; text-align: center;">
        <% if( ! req.isAuthenticated()){%>
          <a href="/login" class="easyui-linkbutton" data-options="iconCls:'icon-large-login',size:'large',iconAlign:'top'">Login</a>
          <a href="/signup" class="easyui-linkbutton" data-options="iconCls:'icon-large-signup',size:'large',iconAlign:'top'">Sign up</a>
        <%} else {%>
          <a href="/logout" class="easyui-linkbutton" data-options="iconCls:'icon-large-logout',size:'large',iconAlign:'top'">Logout</a>
        <%}%>

      </div>
    </div>

    <div data-options="region:'center',iconCls:'icon-ok'"  style="padding:5px">


    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    </div>
  </div>


  <% flash.get('error').forEach(function (message) { %>
    <div class="easyui-panel" id="custom-error-message"><%= message %></div>
  <% return true;}) %>

  <% flash.get('success').forEach(function (message) { %>
    <div class="easyui-panel" id="custom-success-message"><%= message %></div>
  <% return true;}) %>

  <% if (typeof errorMessage != 'undefined') {%>
  <div class="easyui-panel" id="custom-error-message"><%= errorMessage %></div>
  <%}%>

  <% if (typeof successMessage != 'undefined') {%>
    <div class="easyui-panel" id="custom-success-message"><%= successMessage %></div>
  <%}%>




    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/jquery.easyui.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
